import sharp from "sharp";
import fs from "fs";
import path from "path";
import prisma from "./prisma";
import { Country } from "../types/countries.types";
export function generateEstimatedGDP(population: number, exchangeRate: number) {
  return (population * (Math.random() * (2000 - 1000) + 1000)) / exchangeRate;
}

export const generateSummaryImage = async () => {
  try {
    // Ensure cache directory exists
    const cacheDir = path.join(process.cwd(), "cache");
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }

    // Fetch data from database
    const totalCountries = await prisma.country.count();

    const topCountries = await prisma.country.findMany({
      where: {
        estimated_gdp: { not: null },
      },
      orderBy: {
        estimated_gdp: "desc",
      },
      take: 5,
      select: {
        name: true,
        estimated_gdp: true,
      },
    });

    const lastRefreshed = await prisma.country.findFirst({
      orderBy: { last_refreshed_at: "desc" },
      select: { last_refreshed_at: true },
    });

    const timestamp = lastRefreshed?.last_refreshed_at
      ? new Date(lastRefreshed.last_refreshed_at).toLocaleString()
      : new Date().toLocaleString();

    // Build SVG content
    const width = 800;
    const height = 600;

    // Format top countries list
    let topCountriesHTML = "";
    topCountries.forEach((country, index) => {
      const gdpFormatted = country.estimated_gdp
        ? `$${(country.estimated_gdp / 1e9).toFixed(2)}B`
        : "N/A";

      const badgeColor =
        index === 0
          ? "#fbbf24"
          : index === 1
            ? "#9ca3af"
            : index === 2
              ? "#cd7f32"
              : "#cbd5e1";

      topCountriesHTML += `
        <g transform="translate(0, ${index * 50})">
          <circle cx="80" cy="330" r="18" fill="${badgeColor}"/>
          <text x="80" y="336" text-anchor="middle" fill="#ffffff" font-size="16" font-weight="bold">${index + 1}</text>
          <text x="120" y="336" fill="#1e293b" font-size="18" font-weight="bold">${country.name}</text>
          <text x="750" y="336" text-anchor="end" fill="#64748b" font-size="16">${gdpFormatted}</text>
        </g>
      `;
    });

    const svgImage = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="${width}" height="${height}" fill="#f0f4f8"/>

        <!-- Header -->
        <rect width="${width}" height="120" fill="#2563eb"/>
        <text x="${width / 2}" y="60" text-anchor="middle" fill="#ffffff" font-size="36" font-weight="bold">
          Countries Data Summary
        </text>
        <text x="${width / 2}" y="95" text-anchor="middle" fill="#e0e7ff" font-size="16">
          Last Updated: ${timestamp}
        </text>

        <!-- Total Countries Card -->
        <rect x="50" y="150" width="700" height="80" fill="#ffffff" rx="8"
              filter="drop-shadow(0 2px 4px rgba(0,0,0,0.1))"/>
        <text x="80" y="185" fill="#1e293b" font-size="24" font-weight="bold">
          Total Countries
        </text>
        <text x="80" y="220" fill="#2563eb" font-size="32" font-weight="bold">
          ${totalCountries}
        </text>

        <!-- Top 5 Countries Header -->
        <text x="50" y="280" fill="#1e293b" font-size="24" font-weight="bold">
          Top 5 Countries by Estimated GDP
        </text>

        <!-- Top 5 Countries List -->
        ${topCountriesHTML}

        <!-- Footer -->
        <text x="${width / 2}" y="${height - 30}" text-anchor="middle" fill="#94a3b8" font-size="14">
          Generated by Country Currency API
        </text>
      </svg>
    `;

    // Convert SVG to PNG using Sharp
    const imagePath = path.join(cacheDir, "summary.png");

    await sharp(Buffer.from(svgImage)).png().toFile(imagePath);

    console.log(`Summary image generated at: ${imagePath}`);
  } catch (error) {
    console.error("Error generating summary image:", error);
    throw error;
  }
};
